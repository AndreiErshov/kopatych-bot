import { SlashCommandBuilder, GuildMemberRoleManager, GuildMember } from 'discord.js'
import { GuildSlashCommand } from '../modules/CommandManager'
import { communicator, env, isTest } from '..'
import { Logger } from '../util/logger'
import { SMESHARIKI } from '../util/constants'
import { relativeTimestamp } from '../util/functions'
import { readFile } from 'fs/promises'
import { SmesharikiAiConfig } from '../util/types'
import { join } from 'path'
const logger = Logger.new('command.mashup')

const roleTimeouts: { [key: string]: number } = {
    '1129361465976033300': 0.1 * 60 * 1000, // ‚≠ê –ö–æ–º–∞–Ω–¥–∞
    '1238873581769719879': 1   * 60 * 1000, // üó£Ô∏èüîäüî•
    '1155781338826276894': 2.5 * 60 * 1000, // –ê–¥–º–∏–Ω—ã
    '1204796335111413842': 5   * 60 * 1000, // –°—Ç—Ä–∏–º–µ—Ä—ã
    '1129365453991591997': 15  * 60 * 1000, // –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã
    '1130087875363471400': 30  * 60 * 1000, // –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
    '1130071704002113607': 60  * 60 * 1000, // –°—É–ø–µ—Ä-–ü—É–ø–µ—Ä –î–∏—Å–∫–æ –õ—é–¥–∏
}

export const timeoutMap = new Map<string, number>()

export default {
    data: new SlashCommandBuilder()
        .setName('mashup')
        .setDescription('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ù–µ–π—Ä–æ–º–µ—à–∞–ø (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)')

        .setNameLocalization('ru', '–º–µ—à–∞–ø')

        .addStringOption(so => so
            .setName('url')
            .setDescription('Link to the video')
            .setRequired(true)
            .setNameLocalization('ru', '—Å—Å—ã–ª–∫–∞')
            .setDescriptionLocalization('ru', '–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ')
        )
        .addStringOption(so => so
            .setName('character')
            .setDescription('Who will sing?')
            .setRequired(true)
            .setNameLocalization('ru', '—Å–º–µ—à–∞—Ä–∏–∫')
            .setDescriptionLocalization('ru', '–ö—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ç—å?')
            .addChoices(
                { name: '–ö—Ä–æ—à', value: '–∫—Ä–æ—à' },
                { name: '–Å–∂–∏–∫', value: '–µ–∂–∏–∫' },
                { name: '–ù—é—à–∞', value: '–Ω—é—à–∞' },
                { name: '–ë–∞—Ä–∞—à', value: '–±–∞—Ä–∞—à' },
                { name: '–õ–æ—Å—è—à', value: '–ª–æ—Å—è—à' },
                { name: '–ö–æ–ø–∞—Ç—ã—á', value: '–∫–æ–ø–∞—Ç—ã—á' },
                { name: '–ö–∞—Ä-–ö–∞—Ä—ã—á', value: '–∫–∞—Ä-–∫–∞—Ä—ã—á' },
                { name: '–°–æ–≤—É–Ω—å—è', value: '—Å–æ–≤—É–Ω—å—è' },
                { name: '–ü–∏–Ω', value: '–ø–∏–Ω' },
                { name: '–ë–∏–±–∏', value: '–±–∏–±–∏' },
                { name: '–î–∏–∫—Ç–æ—Ä', value: '–¥–∏–∫—Ç–æ—Ä' },
                { name: '–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞—Ç—å', value: 'random' }
            )
        ),
    async execute(interaction) {
        const author = interaction.member!.user.username
        let url = interaction.options.getString('url', true)
        const character = interaction.options.getString('character', true) === 'random'
            ? SMESHARIKI[
                Object.keys(SMESHARIKI)[Math.floor(Math.random() * Object.keys(SMESHARIKI).length)]
            ].name.toLowerCase()
            : interaction.options.getString('character', true)
        const hasMashupRole = Object.keys(roleTimeouts).some(roleID => (interaction.member!.roles as GuildMemberRoleManager).cache.has(roleID))

        if (!hasMashupRole) {
            await interaction.reply({
                content: '‚ùå —è —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏–ª "—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º" ‚ùå',
                ephemeral: true
            })
            logger.info(`No permission - ${interaction.user.id} (${interaction.user.username})`)
            return
        }
        if (!communicator.clients.length) {
            await interaction.reply({
                content: '‚ùå —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üó£Ô∏èüî•üôèüôèüôè (–Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–æ—Ç—É)',
                ephemeral: true
            })
            logger.warn('Communicator client not available')
            return
        }
        const config = JSON.parse(await readFile(join(__dirname, '../../data/smesharikiai-config.json'), 'utf-8')) as SmesharikiAiConfig
        if (!config.acceptMashups && !((interaction.member!.roles as GuildMemberRoleManager).cache.some(role => ['1211666855664549898', '1129361465976033300', '1238873581769719879'].includes(role.id)))) {
            await interaction.reply({
                content: '‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—à–∞–ø–æ–≤ —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–∞',
                ephemeral: true
            })
            logger.info(`Mashups are disabled, ignoring - ${url}`)
            return
        }
        if (!isYoutubeVideoLink(url)) {
            await interaction.reply({
                content: '‚ùå —Å—Å—ã–ª–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –≤–≤–æ–¥–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É —é—Ç—É–±–∞ (<https://www.youtube.com/watch?v=>..., <https://youtu.be/>..., –∏ —Ç.–¥.)',
                ephemeral: true
            })
            logger.info(`Invalid URL - ${url}`)
            return
        }

        const timeoutDuration = getHighestRoleTimeout(interaction.member as GuildMember)
        if (!timeoutDuration) {
            await interaction.reply({
                content: '‚ùå —É —Ç–µ–±—è –µ—Å—Ç—å —Ä–æ–ª—å –¥–ª—è –º–µ—à–∞–ø–æ–≤ –Ω–æ –¥–ª—è –Ω–µ—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–∞–π–º–∞—É—Ç... –ø–∏–Ω–≥—É–π emberglaze –∫—Ä—á —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º',
                ephemeral: true
            })
            logger.warn(`Has permitted role but that role does not have an assigned timeout - ${interaction.user.id} (${interaction.user.username})`)
            return
        }
        const lastTimeout = timeoutMap.get(interaction.user.id) || 0
        if (Date.now() < lastTimeout) {
            await interaction.reply({
                content: `‚ùå –Ω–µ—Ç –ø—É–ø—Å–∏–∫, –ø–æ–¥–æ–∂–¥–∏ –µ—â—ë —á—É—Ç—å —á—É—Ç—å (${relativeTimestamp(Math.floor(lastTimeout / 1000))})`,
                ephemeral: true
            })
            return
        }
        const nextTimeout = Date.now() + timeoutDuration
        timeoutMap.set(interaction.user.id, nextTimeout)
        try {
            communicator.sendMashup(url, author, character)
            await interaction.reply({
                content: `üëç –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä. —Å–ª–µ–¥—É—é—â–∏–π –º–µ—à–∞–ø –º–æ–∂–Ω–æ ${relativeTimestamp(Math.floor(nextTimeout / 1000))}`,
                ephemeral: true
            })
            logger.info(`Sent mashup - ${url} (Author: ${author}; Character: ${character})`)
        } catch (e) {
            const err = e as Error
            logger.warn(`Unexpected error while sending mashup.\n${err.stack ?? err.message}`)
            await interaction.followUp({
                content: `‚ùå —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Ä—É–≥–∞–π emberglaze (\`${err.message}\`)`,
                ephemeral: true
            });
        }
    },
    guildId: isTest ? env.TEST_DISCORD_HOME_SERVER : env.DISCORD_HOME_SERVER
} as GuildSlashCommand

function isYoutubeVideoLink(url: string) {
    return [
        // normal watch links
        'https://www.youtube.com/watch',
        'http://www.youtube.com/watch',
        'www.youtube.com/watch?v=',
        'https://youtube.com/watch',
        'http://youtube.com/watch',
        'youtube.com/watch?v=',
        // short links
        'https://youtu.be/',
        'http://youtu.be/',
        'youtu.be/',
        // shorts
        'https://www.youtube.com/shorts/',
        'http://www.youtube.com/shorts/',
        'www.youtube.com/shorts/',
        'https://youtube.com/shorts/',
        'http://youtube.com/shorts/',
        'youtube.com/shorts/',
    ].some((u: string) => url.startsWith(u))
}

function getHighestRoleTimeout(member: GuildMember) {
    const sortedRoles = Object.keys(roleTimeouts).sort((a, b) => {
        const roleA = member.guild.roles.cache.get(a)
        const roleB = member.guild.roles.cache.get(b)
        if (!roleA || !roleB) {
            logger.warn(`{getHighestRoleTimeout} One of the roles doesn't exist in the cache. RoleA: ${roleA ? 'Exists' : 'Missing'}, RoleB: ${roleB ? 'Exists' : 'Missing'}`)
            return 0
        }
        return roleB.position - roleA.position;
    })
    for (const roleId of sortedRoles) {
        if (member.roles.cache.has(roleId)) {
            logger.info(`{getHighestRoleTimeout} Found matching role ${roleId} for member ${member.id}, returning timeout`)
            return roleTimeouts[roleId]
        } else {
            logger.warn(`{getHighestRoleTimeout} No matching role ${roleId} for member ${member.id}`)
        }
    }
    return null
}
